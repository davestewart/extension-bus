{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Bus, BusErrorType, BusFactory, BusOptions, BusRequest, BusResponse, Handler, Handlers } from './types'\n\n/**\n * Resolve a nested handler by path\n */\nfunction getHandler (input: Handlers, path = ''): Handler | void {\n  const segments = path.split(/[/.]/)\n  let parent: Handlers | Handler = input\n  while (segments.length > 0) {\n    const segment = segments.shift()\n    if (segment) {\n      const child: Handler | Handlers = parent[segment]\n      if (typeof child === 'function') {\n        if (segments.length === 0) {\n          return child.bind(parent)\n        }\n      }\n      else {\n        parent = child\n      }\n    }\n  }\n  return\n}\n\n/**\n * Create a request object\n */\nfunction makeRequest (source: string, target: string, path: string, data: any): BusRequest {\n  // parse target and path\n  const [_target, _path] = path.includes(':')\n    ? path.split(':')\n    : [undefined, path]\n\n  // request object for call\n  return {\n    source,\n    target: _target || target,\n    path: _path,\n    data,\n  }\n}\n\n/**\n * Make a universal chrome messaging bus\n *\n * @param   source    The name of this messaging bus, i.e. \"content\", \"background\", \"account\"\n * @param   options   Optional bus configuration options, including handlers\n */\nexport const makeBus: BusFactory = (source: string, options: BusOptions = {}): Bus => {\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // handlers\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Handle request from source\n   *\n   * @param request       Request data from source bus\n   * @param sender        The message sender / owning process\n   * @param sendResponse  A callback to send a response\n   */\n  const handleRequest = (request: BusRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: BusResponse) => void) => {\n    const { target, path, data } = request || {}\n    // request matches target...\n    if (target === source || target === '*') {\n      // resolve handler\n      const handler = getHandler(handlers, path)\n\n      // setup send\n      const send = (data: Record<string, any>) => {\n        sendResponse({ target: source, ...data })\n      }\n\n      // if we have a handler...\n      if (handler && typeof handler === 'function') {\n        // setup error\n        const handleError = (error: any) => {\n          // send error to calling process\n          send({\n            error: {\n              type: 'handler_error',\n              message: String(error) || 'Error',\n            },\n          })\n\n          // log error locally\n          console.warn(error)\n        }\n\n        // execute handler\n        try {\n          // get the result\n          const result = handler(data, sender)\n\n          // if handler is async, send when done\n          if (result instanceof Promise) {\n            // handle success / error\n            result\n              .then(result => send({ result }))\n              .catch(handleError)\n\n            // tell chrome handler is async\n            return true\n          }\n\n          // if handler is sync, send now\n          send({ result })\n        }\n\n          // catch sync error\n        catch (error) {\n          handleError(error)\n        }\n      }\n\n      // reached named target, but no handler\n      if (target === source) {\n        return send({ error: { type: 'no_handler' } })\n      }\n    }\n  }\n\n  /**\n   * Handle response from target\n   *\n   * Generalised for runtime or tab request\n   *\n   * @param response  The response data sent by the bus at the scripting target\n   * @param request   The original request sent by the source bus\n   * @param resolve   The promise resolve function\n   * @param reject    The promise reject function\n   */\n  const handleResponse = function (response: BusResponse, request: BusRequest, resolve: (response: any) => void, reject: (reason: any) => void) {\n    // variables\n    const chromeError = chrome.runtime.lastError?.message || ''\n\n    // handle chrome / messaging error\n    if (chromeError || !response || response.error) {\n      // error variables\n      let type: BusErrorType = response?.error?.type || 'no_response'\n      let message = response?.error?.message || chromeError || ''\n\n      // error messages\n      const path = `\"${request.target}:${request.path}\"`\n      const errorMessage = `\"${message}\" at ${path}`\n\n      // set error\n      bus.error = {\n        type,\n        message,\n      }\n\n      // reject\n      if (onError === 'reject') {\n        return reject(new Error(errorMessage))\n      }\n\n      // warn, unless \"no_response\" (as a target not existing is not an \"error\" per se)\n      if (onError === 'warn' && type !== 'no_response') {\n        console.warn(`bus[${source}] error ${errorMessage}`)\n      }\n\n      // handle\n      else if (typeof onError === 'function') {\n        onError.call(null, request, response, bus)\n      }\n\n      // finally, resolve\n      return resolve(null)\n    }\n\n    // handle response\n    return resolve(response.result)\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // api\n  // -------------------------------------------------------------------------------------------------------------------\n\n  function call (tabId: number, path: string, data?: any): Promise<any>\n  function call (path: string, data?: any): Promise<any>\n  function call (tabIdOrPath: number | string, pathOrData?: string | any, data?: any): Promise<any> {\n    // reset error\n    bus.error = null\n\n    // build request\n    const request = typeof tabIdOrPath === 'number'\n      ? makeRequest(source, '*', pathOrData, data)\n      : makeRequest(source, target, tabIdOrPath, pathOrData)\n\n    // make call\n    return new Promise((resolve, reject) => {\n      const callback = (response: BusResponse) => handleResponse(response, request, resolve, reject)\n      return typeof tabIdOrPath === 'number'\n        ? chrome.tabs.sendMessage(tabIdOrPath, request, callback)\n        : chrome.runtime.sendMessage(request, callback)\n    })\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // setup\n  // -------------------------------------------------------------------------------------------------------------------\n\n  // add listener for incoming messages\n  chrome.runtime.onMessage.addListener(handleRequest)\n\n  // parameters\n  const {\n    /**\n     * A block of handlers, or nested handlers\n     */\n    handlers = {},\n\n    /**\n     * How to handle errors\n     */\n    onError = 'warn',\n\n    /**\n     * The name of a target bus\n     */\n    target = '*',\n  } = options\n\n  // bus\n  const bus: Bus = {\n    source,\n    target,\n    handlers,\n    call,\n    add (name: string, newHandlers: Handlers) {\n      handlers[name] = newHandlers\n      return bus\n    },\n    error: null,\n  }\n\n  // return\n  return bus\n}\n\nexport type * from './types'\n"],"mappings":"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","names":["target","data","result"]}