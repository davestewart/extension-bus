{"version":3,"file":"bus.es.js","sources":["../src/index.ts"],"sourcesContent":["import { Bus, BusFactory, BusOptions, BusRequest, BusResponse, Handler, Handlers } from './types'\n\n/**\n * Resolve a nested handler by path\n*/\nfunction getHandler (input: Handlers<Handler>, path = ''): Handler | void {\n  const segments = path.split(/[/.]/)\n  let output: Handlers<Handler> | Handler = input\n  while (segments.length > 0) {\n    const segment = segments.shift()\n    if (segment) {\n      const target: Handler | Handlers<Handler> = output[segment]\n      if (typeof target === 'function') {\n        if (segments.length === 0) {\n          return target.bind(target)\n        }\n      }\n      else {\n        output = target\n      }\n    }\n  }\n  return\n}\n\n/**\n * Create a request object\n */\nfunction makeRequest (source: string, target: string, path: string, data: any): BusRequest {\n  // parse target and path\n  const [_target, _path] = path.includes(':')\n    ? path.split(':')\n    : [undefined, path]\n\n  // request object for call\n  return {\n    source,\n    target: _target || target,\n    path: _path,\n    data,\n  }\n}\n\n/**\n * Make a universal chrome messaging bus\n *\n * @param   source    The name of this messaging bus, i.e. \"content\", \"background\", \"account\"\n * @param   options   Optional bus configuration options, including handlers\n */\nexport const makeBus: BusFactory = (source: string, options: BusOptions = {}): Bus => {\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // parameters\n  // -------------------------------------------------------------------------------------------------------------------\n\n  const {\n    /**\n     * A block of handlers, or nested handlers\n     */\n    handlers = {},\n\n    /**\n     * How to handle errors\n     */\n    onError = 'warn',\n\n    /**\n     * The name of a target bus\n     */\n    target = '*',\n  } = options\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // setup\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Handle requests\n   *\n   * @param request       Information passed from source bus\n   * @param sender        The message sender\n   * @param sendResponse  A callback to send a response\n   */\n  const handleRequest = (request: BusRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: any) => void) => {\n    const { target, path, data } = request || {}\n    // request matches target...\n    if (target === '*' || target === source) {\n      // resolve handler\n      const handler = getHandler(handlers, path)\n\n      // if we have a handler...\n      if (handler && typeof handler === 'function') {\n        // setup send\n        const send = (data: Record<string, any>) => {\n          sendResponse({ target: source, ...data })\n        }\n        const handleError = (error: any) => {\n          send({ error: 'message' in error ? error.message : 'unknown' })\n          throw(error)\n        }\n\n        // execute handler\n        try {\n          // get the result\n          const result = handler(data, sender, sender.tab)\n\n          // if handler is async, send when done\n          if (result instanceof Promise) {\n            // handle success\n            result\n              .then(result => send({ result }))\n\n              // catch async error\n              .catch(handleError)\n\n            // tell chrome handler is async\n            return true\n          }\n\n          // if handler is sync, send now\n          send({ result })\n        }\n\n          // catch sync error\n        catch (error) {\n          handleError(error)\n        }\n      }\n    }\n  }\n\n  /**\n   * Generalised response handler (runtime or tabs)\n   *\n   * @param response  The response data sent by the bus at the scripting target\n   * @param request   The original request sent by the source bus\n   * @param resolve   The promise resolve function\n   * @param reject    The promise reject function\n   */\n  const handleResponse = function (response: BusResponse, request: BusRequest, resolve: (response: any) => void, reject: (reason: any) => void) {\n    // error handler\n    const handleError = (error: string, message = '') => {\n      // set error\n      bus.error = error\n\n      // manually handle errors\n      if (typeof onError === 'function') {\n        onError.call(null, request, response)\n        return resolve(null)\n      }\n\n      // otherwise, warn and maybe reject\n      if (onError) {\n        console.warn(`bus[${source}] error \"${error}\" ${message}`)\n      }\n      if (onError === 'reject') {\n        return reject(new Error(error))\n      }\n\n      // resolve null\n      resolve(null)\n    }\n\n    // handle chrome error\n    if (chrome.runtime.lastError) {\n      const message = chrome.runtime.lastError?.message || ''\n      let error = message\n\n      // The message port closed before a response was received.\n      if (message.includes('message port closed')) {\n        error = 'no handler'\n      }\n\n      // 'Could not establish connection. Receiving end does not exist.'\n      else if (message.includes('does not exist')) {\n        error = 'no target'\n      }\n\n      // firefox runtime error\n      else if (response) {\n        response = {\n          error\n        }\n      }\n\n      // pass error to handling function\n      if (error) {\n        return handleError(error, `for \"${request.target}:${request.path}\"`)\n      }\n    }\n\n    // handle no response (firefox won't send a result if target throws)\n    if (!response) {\n      response = { error: 'unknown' }\n    }\n\n    // handle response\n    const { result, error } = response\n    return error\n      ? handleError('runtime error', `at \"${request.target}:${request.path}\": \"${error}\"`)\n      : resolve(result)\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // api\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Send message to scripting targets\n   *\n   * @param tabId The tab id of a content script to target\n   * @param path  The path of the handler to call\n   * @param data  Optional data to pass to the handler\n   */\n  function call (tabId: number, path: string, data?: any): Promise<any>\n  function call (path: string, data?: any): Promise<any>\n  function call (tabIdOrPath: number | string, pathOrData?: string | any, data?: any): Promise<any> {\n    // handle calls to tabs\n    if (typeof tabIdOrPath === 'number') {\n      return callTab(tabIdOrPath, pathOrData, data)\n    }\n\n    // reset error\n    bus.error = ''\n\n    // make request\n    const request = makeRequest(source, target, tabIdOrPath, pathOrData)\n    return new Promise((resolve, reject) => {\n      return chrome.runtime.sendMessage(request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  /**\n   * Send message to content script tab\n   *\n   * @param tabId The tab id of a content script to target\n   * @param path  The path of the handler to call\n   * @param data  Optional data to pass to the handler\n   */\n  function callTab (tabId: number, path: string, data?: any ): Promise<any> {\n    // reset error\n    bus.error = ''\n\n    // make request\n    const request = makeRequest(source, '*', path, data)\n    return new Promise((resolve, reject) => {\n      return chrome.tabs.sendMessage(tabId, request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // setup\n  // -------------------------------------------------------------------------------------------------------------------\n\n  // add listener for incoming messages\n  chrome.runtime.onMessage.addListener(handleRequest)\n\n  // build output object\n  const bus = {\n    source,\n    target,\n    error: '',\n    call,\n    handlers,\n    assign (newHandlers: Handlers<Handler>) {\n      Object.assign(handlers, newHandlers)\n      return bus\n    },\n  }\n\n  // return\n  return bus\n}\n"],"names":["target","data","result","error"],"mappings":"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"}