{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Bus, BusFactory, BusOptions, BusRequest, BusResponse, Handler, Handlers } from './types'\n\n/**\n * Resolve a nested handler by path\n*/\nfunction getHandler (input: Handlers, path = ''): Handler | void {\n  const segments = path.split(/[/.]/)\n  let parent: Handlers | Handler = input\n  while (segments.length > 0) {\n    const segment = segments.shift()\n    if (segment) {\n      const child: Handler | Handlers = parent[segment]\n      if (typeof child === 'function') {\n        if (segments.length === 0) {\n          return child.bind(parent)\n        }\n      }\n      else {\n        parent = child\n      }\n    }\n  }\n  return\n}\n\n/**\n * Create a request object\n */\nfunction makeRequest (source: string, target: string, path: string, data: any): BusRequest {\n  // parse target and path\n  const [_target, _path] = path.includes(':')\n    ? path.split(':')\n    : [undefined, path]\n\n  // request object for call\n  return {\n    source,\n    target: _target || target,\n    path: _path,\n    data,\n  }\n}\n\n/**\n * Make a universal chrome messaging bus\n *\n * @param   source    The name of this messaging bus, i.e. \"content\", \"background\", \"account\"\n * @param   options   Optional bus configuration options, including handlers\n */\nexport const makeBus: BusFactory = (source: string, options: BusOptions = {}): Bus => {\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // handlers\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Handle request from source\n   *\n   * @param request       Request data from source bus\n   * @param sender        The message sender / owning process\n   * @param sendResponse  A callback to send a response\n   */\n  const handleRequest = (request: BusRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: BusResponse) => void) => {\n    const { target, path, data } = request || {}\n    // request matches target...\n    if (target === source || target === '*') {\n      // resolve handler\n      const handler = getHandler(handlers, path)\n\n      // setup send\n      const send = (data: Record<string, any>) => {\n        sendResponse({ target: source, ...data })\n      }\n\n      // setup error\n      const handleError = (error: any) => {\n        // send error to calling process\n        send({\n          error: 'message' in error\n            ? error.message\n            : 'unknown'\n        })\n\n        // log error locally\n        console.warn(error)\n      }\n\n      // if we have a handler...\n      if (handler && typeof handler === 'function') {\n        // execute handler\n        try {\n          // get the result\n          const result = handler(data, sender, sender.tab)\n\n          // if handler is async, send when done\n          if (result instanceof Promise) {\n            // handle success / error\n            result\n              .then(result => send({ result }))\n              .catch(handleError)\n\n            // tell chrome handler is async\n            return true\n          }\n\n          // if handler is sync, send now\n          send({ result })\n        }\n\n          // catch sync error\n        catch (error) {\n          handleError(error)\n        }\n      }\n\n      // reached specific target, but no handler\n      if (target === source) {\n        return send({ error: 'no handler' })\n      }\n    }\n  }\n\n  /**\n   * Handle response to source\n   *\n   * Generalised for runtime or tab request\n   *\n   * @param response  The response data sent by the bus at the scripting target\n   * @param request   The original request sent by the source bus\n   * @param resolve   The promise resolve function\n   * @param reject    The promise reject function\n   */\n  const handleResponse = function (response: BusResponse, request: BusRequest, resolve: (response: any) => void, reject: (reason: any) => void) {\n    // error handler\n    const handleError = (error: string, message = '', location = '') => {\n      // set error\n      bus.error = error\n\n      // TODO\n      // change error from string message to { type: 'no response', message: 'chrome issue' }\n\n      // manually handle errors\n      if (typeof onError === 'function') {\n        onError.call(null, request, response)\n        return resolve(null)\n      }\n\n      // otherwise, warn...\n      if (onError) {\n        // unless \"no target\" â€“ as a target not existing is not strictly an error\n        if (error !== 'no target') {\n          console.warn(`bus[${source}] error \"${error}\" ${message}`)\n        }\n      }\n\n      // ...or reject\n      if (onError === 'reject') {\n        return reject(new Error(error))\n      }\n\n      // resolve null\n      resolve(null)\n    }\n\n    // handle chrome / messaging error\n    if (!response || chrome.runtime.lastError || response.error === 'no handler') {\n      const message = chrome.runtime.lastError?.message || response.error || ''\n      let error = message\n\n      // firefox no target\n      if (!response && !error) {\n        error = 'no response'\n      }\n\n      // Could not establish connection. Receiving end does not exist.\n      else if (message.includes('does not exist')) {\n        error = 'no response'\n      }\n\n      // The message port closed before a response was received.\n      else if (message.includes('message port closed')) {\n        // all listeners were called, but none were matched\n        error = 'no response'\n      }\n\n      // pass error to handling function\n      if (error) {\n        return handleError(error, `for \"${request.target}:${request.path}\"`)\n      }\n    }\n\n    // handle response\n    return response.error\n      ? handleError('handler error', `at \"${request.target}:${request.path}\": \"${response.error}\"`)\n      : resolve(response.result)\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // api\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Send message to scripting targets\n   *\n   * @param tabId The tab id of a content script to target\n   * @param path  The path of the handler to call\n   * @param data  Optional data to pass to the handler\n   */\n  function call (tabId: number, path: string, data?: any): Promise<any>\n  function call (path: string, data?: any): Promise<any>\n  function call (tabIdOrPath: number | string, pathOrData?: string | any, data?: any): Promise<any> {\n    // handle calls to tabs\n    if (typeof tabIdOrPath === 'number') {\n      return callTab(tabIdOrPath, pathOrData, data)\n    }\n\n    // reset error\n    bus.error = ''\n\n    // make request\n    const request = makeRequest(source, target, tabIdOrPath, pathOrData)\n    return new Promise((resolve, reject) => {\n      return chrome.runtime.sendMessage(request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  /**\n   * Send message to content script tab\n   *\n   * @param tabId The tab id of a content script to target\n   * @param path  The path of the handler to call\n   * @param data  Optional data to pass to the handler\n   */\n  function callTab (tabId: number, path: string, data?: any ): Promise<any> {\n    // reset error\n    bus.error = ''\n\n    // make request\n    const request = makeRequest(source, '*', path, data)\n    return new Promise((resolve, reject) => {\n      return chrome.tabs.sendMessage(tabId, request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // setup\n  // -------------------------------------------------------------------------------------------------------------------\n\n  // add listener for incoming messages\n  chrome.runtime.onMessage.addListener(handleRequest)\n\n  // parameters\n  const {\n    /**\n     * A block of handlers, or nested handlers\n     */\n    handlers = {},\n\n    /**\n     * How to handle errors\n     */\n    onError = 'warn',\n\n    /**\n     * The name of a target bus\n     */\n    target = '*',\n  } = options\n\n  // bus\n  const bus = {\n    source,\n    target,\n    handlers,\n    call,\n    add (name: string, newHandlers: Handlers) {\n      handlers[name] = newHandlers\n      return bus\n    },\n    error: '',\n  }\n\n  // return\n  return bus\n}\n\nexport type * from './types'\n"],"mappings":"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","names":["target","data","result"]}