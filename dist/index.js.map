{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  Bus,\n  BusErrorCode,\n  BusFactory,\n  BusOptions,\n  BusRequest,\n  BusResponse,\n  BusResponseError,\n  Handler,\n  Handlers,\n} from './types'\n\n/**\n * Resolve a nested handler by path\n */\nexport function getHandler (input: Handlers, path = ''): Handler | void {\n  const segments = path.split('/')\n  let parent: Handlers | Handler = input\n  while (segments.length > 0) {\n    const segment = segments.shift()\n    if (segment) {\n      const child: Handler | Handlers = parent[segment]\n      if (typeof child === 'function') {\n        if (segments.length === 0) {\n          return child.bind(parent)\n        }\n      }\n      else {\n        parent = child\n      }\n    }\n  }\n  return\n}\n\n/**\n * Create a request object\n */\nfunction makeRequest (source: string, target: string, path: string, data: any): BusRequest {\n  // parse target and path\n  const [_target, _path] = path.includes(':')\n    ? path.split(':')\n    : [undefined, path]\n\n  // request object for call\n  return {\n    source,\n    target: _target || target,\n    path: _path,\n    data,\n  }\n}\n\n/**\n * Create a response object\n */\nfunction makeResponse (target: string, payload: { error: BusResponseError } | { result: any }): BusResponse {\n  return { target, ...payload }\n}\n\n/**\n * Make a universal chrome messaging bus\n *\n * @param   source    The name of this messaging bus, i.e. \"content\", \"background\", \"account\"\n * @param   options   Optional bus configuration options, including handlers\n */\nexport const makeBus: BusFactory = (source: string, options: BusOptions = {}): Bus => {\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // core\n  // -------------------------------------------------------------------------------------------------------------------\n\n  /**\n   * Handle request from source\n   *\n   * @param request       Request data from source bus\n   * @param sender        The message sender / owning process\n   * @param sendResponse  A callback to send a response\n   */\n  const handleRequest = (request: BusRequest, sender: chrome.runtime.MessageSender, sendResponse: (response?: BusResponse) => void) => {\n    const { target, path, data } = request || {}\n    // request matches target...\n    if (target === source || target === '*') {\n      // resolve handler\n      const handler = getHandler(handlers, path)\n\n      // setup send\n      const send = (data: { result: any } | { error: BusResponseError }) => {\n        sendResponse(makeResponse(source, data))\n      }\n\n      // if we have a handler...\n      if (handler && typeof handler === 'function') {\n        // setup error\n        const handleError = (error: any) => {\n          // build error\n          const data = error instanceof Error\n            ? { message: error.message, type: error.name }\n            : { message: error }\n\n          // send to calling process\n          send({\n            error: { code: 'handler_error', ...data }\n          })\n\n          // log locally\n          console.warn(error)\n        }\n\n        // execute handler\n        try {\n          // get the result\n          const result = handler(data, sender)\n\n          // if handler is async, send when done\n          if (result instanceof Promise) {\n            // handle success / error\n            result\n              .then(result => send({ result }))\n              .catch(handleError)\n\n            // tell chrome handler is async\n            return true\n          }\n\n          // if handler is sync, send now\n          send({ result })\n        }\n\n          // catch sync error\n        catch (error) {\n          handleError(error)\n        }\n      }\n\n      // reached named target, but no handler\n      if (target === source) {\n        return send({ error: { code: 'no_handler', message: `No handler` } })\n      }\n    }\n  }\n\n  const handleExternalRequest = (request: any, sender: chrome.runtime.MessageSender, sendResponse: (response?: BusResponse) => void) => {\n    if (request && typeof request === 'object' && 'path' in request) {\n      // variables\n      const path = request.path\n      const external = options.external\n\n      // filter\n      if (typeof path === 'string') {\n        // only valid paths\n        if (Array.isArray(external)) {\n          if (!external.some(p => {\n            const rx = new RegExp(`^${p.replace(/\\*/g, '.+?')}$`)\n            return rx.test(path)\n          })) {\n            return sendResponse()\n          }\n        }\n\n        // predicate function\n        if (typeof external === 'function') {\n          if (!external(path, sender)) {\n            return sendResponse()\n          }\n        }\n\n        // handle\n        return handleRequest({ source: 'external', target: '*', ...request }, sender, sendResponse)\n      }\n    }\n  }\n\n  /**\n   * Handle response from target\n   *\n   * Generalised for runtime or tab request\n   *\n   * @param response  The response data sent by the bus at the scripting target\n   * @param request   The original request sent by the source bus\n   * @param resolve   The promise resolve function\n   * @param reject    The promise reject function\n   */\n  const handleResponse = function (response: BusResponse, request: BusRequest, resolve: (response: any) => void, reject: (reason: any) => void) {\n    // variables\n    const chromeError = chrome.runtime.lastError?.message || ''\n\n    // handle chrome / messaging error\n    if (chromeError || !response || response.error) {\n      // error variables\n      const code: BusErrorCode = response?.error?.code || 'no_response'\n      const message = response?.error?.message ?? chromeError ?? 'Unknown'\n      const type = response?.error?.type || 'Error'\n      const target = `${response?.target || request.target}:${request.path}`\n\n      // set error\n      bus.error = {\n        code,\n        message,\n        target,\n      }\n\n      // reject\n      if (onError === 'reject') {\n        return reject(bus.error)\n      }\n\n      // warn, unless \"no_response\" (as a target not existing is not an \"error\" per se)\n      if (onError === 'warn' && code !== 'no_response') {\n        console.warn(`extension-bus[${source}] ${type} at \"${target}\": ${message}`)\n      }\n\n      // handle\n      else if (typeof onError === 'function') {\n        return resolve(onError(request, response, bus))\n      }\n\n      // finally, resolve\n      return resolve(null)\n    }\n\n    // handle response\n    return resolve(response.result)\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // api\n  // -------------------------------------------------------------------------------------------------------------------\n\n  async function call <R = any, D = any>(path: string, data?: D): Promise<R> {\n    return new Promise((resolve, reject) => {\n      bus.error = null\n      const request = makeRequest(source, target, path, data)\n      return chrome.runtime.sendMessage(request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  async function callTab <R = any, D = any>(tabId: number | true, path: string, data?: D): Promise<R> {\n    let _tabId: number\n    if (tabId === true ) {\n      const tabs = await chrome.tabs.query({ active: true, currentWindow: true })\n      _tabId = tabs[0]?.id || 0\n    }\n    else {\n      _tabId = tabId\n    }\n    return new Promise(function (resolve, reject) {\n      bus.error = null\n      const request = makeRequest(source, '*', path, data)\n      return chrome.tabs.sendMessage(_tabId, request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  async function callExtension <R = any, D = any>(extensionId: string, path: string, data?: D): Promise<R> {\n    return new Promise(function (resolve, reject) {\n      bus.error = null\n      const request = makeRequest(source, '*', path, data)\n      return chrome.runtime.sendMessage(extensionId, request, response => handleResponse(response, request, resolve, reject))\n    })\n  }\n\n  // -------------------------------------------------------------------------------------------------------------------\n  // setup\n  // -------------------------------------------------------------------------------------------------------------------\n\n  // add listener for internal messages\n  chrome.runtime.onMessage.addListener(handleRequest)\n\n  // add listener for external messages\n  if (options.external) {\n    chrome.runtime.onMessageExternal.addListener(handleExternalRequest)\n  }\n\n  // defaults\n  const {\n    handlers = {},\n    onError = 'warn',\n    target = '*',\n  } = options\n\n  // bus\n  const bus: Bus = {\n    source,\n    target,\n    handlers,\n    call,\n    callTab,\n    callExtension,\n    add (name: string, newHandlers: Handlers) {\n      handlers[name] = newHandlers\n      return bus\n    },\n    error: null,\n  }\n\n  // return\n  return bus\n}\n\nexport type * from './types'\n"],"mappings":"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","names":["target","data","result"]}